/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import BN from "bn.js";
import { ContractOptions } from "web3-eth-contract";
import { EventLog } from "web3-core";
import { EventEmitter } from "events";
import {
  Callback,
  PayableTransactionObject,
  NonPayableTransactionObject,
  BlockType,
  ContractEventLog,
  BaseContract,
} from "./types";

interface EventOptions {
  filter?: object;
  fromBlock?: BlockType;
  topics?: string[];
}

export type GovernanceCallTimelocked = ContractEventLog<{
  selector: string;
  allowedAfterTimestamp: string;
  encodedCall: string;
  0: string;
  1: string;
  2: string;
}>;
export type GovernanceInitialised = ContractEventLog<{
  initialGovernance: string;
  0: string;
}>;
export type GovernedProductionModeEntered = ContractEventLog<{
  governanceSettings: string;
  0: string;
}>;
export type PChainStakeMirrorValidatorUptimeVoteSubmitted = ContractEventLog<{
  rewardEpochId: string;
  timestamp: string;
  voter: string;
  nodeIds: string[];
  0: string;
  1: string;
  2: string;
  3: string[];
}>;
export type PChainStakeMirrorVoteSubmitted = ContractEventLog<{
  epochId: string;
  voter: string;
  merkleRoot: string;
  0: string;
  1: string;
  2: string;
}>;
export type PChainStakeMirrorVotersSet = ContractEventLog<{
  voters: string[];
  0: string[];
}>;
export type PChainStakeMirrorVotingFinalized = ContractEventLog<{
  epochId: string;
  merkleRoot: string;
  0: string;
  1: string;
}>;
export type PChainStakeMirrorVotingReset = ContractEventLog<{
  epochId: string;
  0: string;
}>;
export type PChainStakeMirrorVotingThresholdSet = ContractEventLog<{
  votingThreshold: string;
  0: string;
}>;
export type TimelockedGovernanceCallCanceled = ContractEventLog<{
  selector: string;
  timestamp: string;
  0: string;
  1: string;
}>;
export type TimelockedGovernanceCallExecuted = ContractEventLog<{
  selector: string;
  timestamp: string;
  0: string;
  1: string;
}>;

export interface PChainStakeMirrorMultiSigVoting extends BaseContract {
  constructor(
    jsonInterface: any[],
    address?: string,
    options?: ContractOptions
  ): PChainStakeMirrorMultiSigVoting;
  clone(): PChainStakeMirrorMultiSigVoting;
  methods: {
    cancelGovernanceCall(
      _selector: string | number[]
    ): NonPayableTransactionObject<void>;

    changeVoters(_newVotersList: string[]): NonPayableTransactionObject<void>;

    executeGovernanceCall(
      _selector: string | number[]
    ): NonPayableTransactionObject<void>;

    getCurrentEpochId(): NonPayableTransactionObject<string>;

    getEpochConfiguration(): NonPayableTransactionObject<{
      _firstEpochStartTs: string;
      _epochDurationSeconds: string;
      0: string;
      1: string;
    }>;

    getEpochId(
      _timestamp: number | string | BN
    ): NonPayableTransactionObject<string>;

    getMerkleRoot(
      _epochId: number | string | BN
    ): NonPayableTransactionObject<string>;

    getVoters(): NonPayableTransactionObject<string[]>;

    getVotes(
      _epochId: number | string | BN
    ): NonPayableTransactionObject<[string, string[]][]>;

    getVotingThreshold(): NonPayableTransactionObject<string>;

    governance(): NonPayableTransactionObject<string>;

    governanceSettings(): NonPayableTransactionObject<string>;

    initialise(_initialGovernance: string): NonPayableTransactionObject<void>;

    productionMode(): NonPayableTransactionObject<boolean>;

    resetVoting(
      _epochId: number | string | BN
    ): NonPayableTransactionObject<void>;

    setVotingThreshold(
      _votingThreshold: number | string | BN
    ): NonPayableTransactionObject<void>;

    shouldVote(
      _epochId: number | string | BN,
      _voter: string
    ): NonPayableTransactionObject<boolean>;

    submitValidatorUptimeVote(
      _rewardEpochId: number | string | BN,
      _nodeIds: (string | number[])[]
    ): NonPayableTransactionObject<void>;

    submitVote(
      _epochId: number | string | BN,
      _merkleRoot: string | number[]
    ): NonPayableTransactionObject<void>;

    switchToProductionMode(): NonPayableTransactionObject<void>;

    timelockedCalls(arg0: string | number[]): NonPayableTransactionObject<{
      allowedAfterTimestamp: string;
      encodedCall: string;
      0: string;
      1: string;
    }>;
  };
  events: {
    GovernanceCallTimelocked(
      cb?: Callback<GovernanceCallTimelocked>
    ): EventEmitter;
    GovernanceCallTimelocked(
      options?: EventOptions,
      cb?: Callback<GovernanceCallTimelocked>
    ): EventEmitter;

    GovernanceInitialised(cb?: Callback<GovernanceInitialised>): EventEmitter;
    GovernanceInitialised(
      options?: EventOptions,
      cb?: Callback<GovernanceInitialised>
    ): EventEmitter;

    GovernedProductionModeEntered(
      cb?: Callback<GovernedProductionModeEntered>
    ): EventEmitter;
    GovernedProductionModeEntered(
      options?: EventOptions,
      cb?: Callback<GovernedProductionModeEntered>
    ): EventEmitter;

    PChainStakeMirrorValidatorUptimeVoteSubmitted(
      cb?: Callback<PChainStakeMirrorValidatorUptimeVoteSubmitted>
    ): EventEmitter;
    PChainStakeMirrorValidatorUptimeVoteSubmitted(
      options?: EventOptions,
      cb?: Callback<PChainStakeMirrorValidatorUptimeVoteSubmitted>
    ): EventEmitter;

    PChainStakeMirrorVoteSubmitted(
      cb?: Callback<PChainStakeMirrorVoteSubmitted>
    ): EventEmitter;
    PChainStakeMirrorVoteSubmitted(
      options?: EventOptions,
      cb?: Callback<PChainStakeMirrorVoteSubmitted>
    ): EventEmitter;

    PChainStakeMirrorVotersSet(
      cb?: Callback<PChainStakeMirrorVotersSet>
    ): EventEmitter;
    PChainStakeMirrorVotersSet(
      options?: EventOptions,
      cb?: Callback<PChainStakeMirrorVotersSet>
    ): EventEmitter;

    PChainStakeMirrorVotingFinalized(
      cb?: Callback<PChainStakeMirrorVotingFinalized>
    ): EventEmitter;
    PChainStakeMirrorVotingFinalized(
      options?: EventOptions,
      cb?: Callback<PChainStakeMirrorVotingFinalized>
    ): EventEmitter;

    PChainStakeMirrorVotingReset(
      cb?: Callback<PChainStakeMirrorVotingReset>
    ): EventEmitter;
    PChainStakeMirrorVotingReset(
      options?: EventOptions,
      cb?: Callback<PChainStakeMirrorVotingReset>
    ): EventEmitter;

    PChainStakeMirrorVotingThresholdSet(
      cb?: Callback<PChainStakeMirrorVotingThresholdSet>
    ): EventEmitter;
    PChainStakeMirrorVotingThresholdSet(
      options?: EventOptions,
      cb?: Callback<PChainStakeMirrorVotingThresholdSet>
    ): EventEmitter;

    TimelockedGovernanceCallCanceled(
      cb?: Callback<TimelockedGovernanceCallCanceled>
    ): EventEmitter;
    TimelockedGovernanceCallCanceled(
      options?: EventOptions,
      cb?: Callback<TimelockedGovernanceCallCanceled>
    ): EventEmitter;

    TimelockedGovernanceCallExecuted(
      cb?: Callback<TimelockedGovernanceCallExecuted>
    ): EventEmitter;
    TimelockedGovernanceCallExecuted(
      options?: EventOptions,
      cb?: Callback<TimelockedGovernanceCallExecuted>
    ): EventEmitter;

    allEvents(options?: EventOptions, cb?: Callback<EventLog>): EventEmitter;
  };

  once(
    event: "GovernanceCallTimelocked",
    cb: Callback<GovernanceCallTimelocked>
  ): void;
  once(
    event: "GovernanceCallTimelocked",
    options: EventOptions,
    cb: Callback<GovernanceCallTimelocked>
  ): void;

  once(
    event: "GovernanceInitialised",
    cb: Callback<GovernanceInitialised>
  ): void;
  once(
    event: "GovernanceInitialised",
    options: EventOptions,
    cb: Callback<GovernanceInitialised>
  ): void;

  once(
    event: "GovernedProductionModeEntered",
    cb: Callback<GovernedProductionModeEntered>
  ): void;
  once(
    event: "GovernedProductionModeEntered",
    options: EventOptions,
    cb: Callback<GovernedProductionModeEntered>
  ): void;

  once(
    event: "PChainStakeMirrorValidatorUptimeVoteSubmitted",
    cb: Callback<PChainStakeMirrorValidatorUptimeVoteSubmitted>
  ): void;
  once(
    event: "PChainStakeMirrorValidatorUptimeVoteSubmitted",
    options: EventOptions,
    cb: Callback<PChainStakeMirrorValidatorUptimeVoteSubmitted>
  ): void;

  once(
    event: "PChainStakeMirrorVoteSubmitted",
    cb: Callback<PChainStakeMirrorVoteSubmitted>
  ): void;
  once(
    event: "PChainStakeMirrorVoteSubmitted",
    options: EventOptions,
    cb: Callback<PChainStakeMirrorVoteSubmitted>
  ): void;

  once(
    event: "PChainStakeMirrorVotersSet",
    cb: Callback<PChainStakeMirrorVotersSet>
  ): void;
  once(
    event: "PChainStakeMirrorVotersSet",
    options: EventOptions,
    cb: Callback<PChainStakeMirrorVotersSet>
  ): void;

  once(
    event: "PChainStakeMirrorVotingFinalized",
    cb: Callback<PChainStakeMirrorVotingFinalized>
  ): void;
  once(
    event: "PChainStakeMirrorVotingFinalized",
    options: EventOptions,
    cb: Callback<PChainStakeMirrorVotingFinalized>
  ): void;

  once(
    event: "PChainStakeMirrorVotingReset",
    cb: Callback<PChainStakeMirrorVotingReset>
  ): void;
  once(
    event: "PChainStakeMirrorVotingReset",
    options: EventOptions,
    cb: Callback<PChainStakeMirrorVotingReset>
  ): void;

  once(
    event: "PChainStakeMirrorVotingThresholdSet",
    cb: Callback<PChainStakeMirrorVotingThresholdSet>
  ): void;
  once(
    event: "PChainStakeMirrorVotingThresholdSet",
    options: EventOptions,
    cb: Callback<PChainStakeMirrorVotingThresholdSet>
  ): void;

  once(
    event: "TimelockedGovernanceCallCanceled",
    cb: Callback<TimelockedGovernanceCallCanceled>
  ): void;
  once(
    event: "TimelockedGovernanceCallCanceled",
    options: EventOptions,
    cb: Callback<TimelockedGovernanceCallCanceled>
  ): void;

  once(
    event: "TimelockedGovernanceCallExecuted",
    cb: Callback<TimelockedGovernanceCallExecuted>
  ): void;
  once(
    event: "TimelockedGovernanceCallExecuted",
    options: EventOptions,
    cb: Callback<TimelockedGovernanceCallExecuted>
  ): void;
}
